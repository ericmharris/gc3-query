# coding: utf-8

"""
    SecRules

    A security rule defines network access over a specified protocol between instances in two security lists, or from a set of external hosts (an IP list) to instances in a security list.<p>Security rules tie the security list, security IP list, and security application entities together.<p>You can create, delete, update, and view security rules using the HTTP requests listed below. For more information about security rules, see <a target=\"_blank\" href=\"http://www.oracle.com/pls/topic/lookup?ctx=stcomputecs&id=STCSG-GUID-1AEDDA2C-3561-4759-B5AD-FB4CD9C2FBD8\">About Security Rules</a> in <em>Using Oracle Cloud Infrastructure Compute Classic</em>.  # noqa: E501

    OpenAPI spec version: 18.1.2-20180126.052521
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.interval import Interval  # noqa: F401,E501


class DailyWeeklyInterval(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_time_zone': 'str',
        'time_of_day': 'str',
        'days_of_week': 'list[str]'
    }

    attribute_map = {
        'user_time_zone': 'userTimeZone',
        'time_of_day': 'timeOfDay',
        'days_of_week': 'daysOfWeek'
    }

    def __init__(self, user_time_zone=None, time_of_day=None, days_of_week=None):  # noqa: E501
        """DailyWeeklyInterval - a model defined in Swagger"""  # noqa: E501

        self._user_time_zone = None
        self._time_of_day = None
        self._days_of_week = None
        self.discriminator = None

        if user_time_zone is not None:
            self.user_time_zone = user_time_zone
        if time_of_day is not None:
            self.time_of_day = time_of_day
        if days_of_week is not None:
            self.days_of_week = days_of_week

    @property
    def user_time_zone(self):
        """Gets the user_time_zone of this DailyWeeklyInterval.  # noqa: E501

        Any IANA time zone. e.g: America/Los_Angeles  # noqa: E501

        :return: The user_time_zone of this DailyWeeklyInterval.  # noqa: E501
        :rtype: str
        """
        return self._user_time_zone

    @user_time_zone.setter
    def user_time_zone(self, user_time_zone):
        """Sets the user_time_zone of this DailyWeeklyInterval.

        Any IANA time zone. e.g: America/Los_Angeles  # noqa: E501

        :param user_time_zone: The user_time_zone of this DailyWeeklyInterval.  # noqa: E501
        :type: str
        """

        self._user_time_zone = user_time_zone

    @property
    def time_of_day(self):
        """Gets the time_of_day of this DailyWeeklyInterval.  # noqa: E501

        Time of the day to run a backup  # noqa: E501

        :return: The time_of_day of this DailyWeeklyInterval.  # noqa: E501
        :rtype: str
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this DailyWeeklyInterval.

        Time of the day to run a backup  # noqa: E501

        :param time_of_day: The time_of_day of this DailyWeeklyInterval.  # noqa: E501
        :type: str
        """
        if time_of_day is not None and not re.search('([01]?[0-9]|2[0-3]):[0-5][0-9]', time_of_day):  # noqa: E501
            raise ValueError("Invalid value for `time_of_day`, must be a follow pattern or equal to `/([01]?[0-9]|2[0-3]):[0-5][0-9]/`")  # noqa: E501

        self._time_of_day = time_of_day

    @property
    def days_of_week(self):
        """Gets the days_of_week of this DailyWeeklyInterval.  # noqa: E501

        Days of the week to run a backup  # noqa: E501

        :return: The days_of_week of this DailyWeeklyInterval.  # noqa: E501
        :rtype: list[str]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this DailyWeeklyInterval.

        Days of the week to run a backup  # noqa: E501

        :param days_of_week: The days_of_week of this DailyWeeklyInterval.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if not set(days_of_week).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `days_of_week` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(days_of_week) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._days_of_week = days_of_week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DailyWeeklyInterval):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
