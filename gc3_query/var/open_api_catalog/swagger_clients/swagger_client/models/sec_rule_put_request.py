# coding: utf-8

"""
    SecRules

    A security rule defines network access over a specified protocol between instances in two security lists, or from a set of external hosts (an IP list) to instances in a security list.<p>Security rules tie the security list, security IP list, and security application entities together.<p>You can create, delete, update, and view security rules using the HTTP requests listed below. For more information about security rules, see <a target=\"_blank\" href=\"http://www.oracle.com/pls/topic/lookup?ctx=stcomputecs&id=STCSG-GUID-1AEDDA2C-3561-4759-B5AD-FB4CD9C2FBD8\">About Security Rules</a> in <em>Using Oracle Cloud Infrastructure Compute Classic</em>.  # noqa: E501

    OpenAPI spec version: 18.1.2-20180126.052521
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SecRulePutRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'application': 'str',
        'description': 'str',
        'disabled': 'bool',
        'dst_list': 'str',
        'name': 'str',
        'src_list': 'str'
    }

    attribute_map = {
        'action': 'action',
        'application': 'application',
        'description': 'description',
        'disabled': 'disabled',
        'dst_list': 'dst_list',
        'name': 'name',
        'src_list': 'src_list'
    }

    def __init__(self, action=None, application=None, description=None, disabled=None, dst_list=None, name=None, src_list=None):  # noqa: E501
        """SecRulePutRequest - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._application = None
        self._description = None
        self._disabled = None
        self._dst_list = None
        self._name = None
        self._src_list = None
        self.discriminator = None

        self.action = action
        self.application = application
        if description is not None:
            self.description = description
        if disabled is not None:
            self.disabled = disabled
        self.dst_list = dst_list
        self.name = name
        self.src_list = src_list

    @property
    def action(self):
        """Gets the action of this SecRulePutRequest.  # noqa: E501

        <p>Set this parameter to <code>PERMIT</code>.  # noqa: E501

        :return: The action of this SecRulePutRequest.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SecRulePutRequest.

        <p>Set this parameter to <code>PERMIT</code>.  # noqa: E501

        :param action: The action of this SecRulePutRequest.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def application(self):
        """Gets the application of this SecRulePutRequest.  # noqa: E501

        <p>The three-part name of the security application: (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object_name</em></code>) for user-defined security applications and <code>/oracle/public/<em>object_name</em></code> for predefined security applications.  # noqa: E501

        :return: The application of this SecRulePutRequest.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this SecRulePutRequest.

        <p>The three-part name of the security application: (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object_name</em></code>) for user-defined security applications and <code>/oracle/public/<em>object_name</em></code> for predefined security applications.  # noqa: E501

        :param application: The application of this SecRulePutRequest.  # noqa: E501
        :type: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")  # noqa: E501

        self._application = application

    @property
    def description(self):
        """Gets the description of this SecRulePutRequest.  # noqa: E501

        <p>A description of the security rule.  # noqa: E501

        :return: The description of this SecRulePutRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SecRulePutRequest.

        <p>A description of the security rule.  # noqa: E501

        :param description: The description of this SecRulePutRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this SecRulePutRequest.  # noqa: E501

        <p>Indicates whether the security rule is enabled (set to <code>false</code>) or disabled (<code>true</code>). The default setting is <code>false</code>.  # noqa: E501

        :return: The disabled of this SecRulePutRequest.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this SecRulePutRequest.

        <p>Indicates whether the security rule is enabled (set to <code>false</code>) or disabled (<code>true</code>). The default setting is <code>false</code>.  # noqa: E501

        :param disabled: The disabled of this SecRulePutRequest.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def dst_list(self):
        """Gets the dst_list of this SecRulePutRequest.  # noqa: E501

        <p>The three-part name (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object_name</em></code>) of the destination security list or security IP list.<p>You must use the prefix <code>seclist</code>: or <code>seciplist</code>: to identify the list type.<p><b>Note:</b> You can specify a security IP list as the destination in a secrule, provided <code>src_list</code> is a security list that has DENY as its outbound policy.<p>You cannot specify any of the security IP lists in the <code>/oracle/public</code> container as a destination in a secrule.  # noqa: E501

        :return: The dst_list of this SecRulePutRequest.  # noqa: E501
        :rtype: str
        """
        return self._dst_list

    @dst_list.setter
    def dst_list(self, dst_list):
        """Sets the dst_list of this SecRulePutRequest.

        <p>The three-part name (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object_name</em></code>) of the destination security list or security IP list.<p>You must use the prefix <code>seclist</code>: or <code>seciplist</code>: to identify the list type.<p><b>Note:</b> You can specify a security IP list as the destination in a secrule, provided <code>src_list</code> is a security list that has DENY as its outbound policy.<p>You cannot specify any of the security IP lists in the <code>/oracle/public</code> container as a destination in a secrule.  # noqa: E501

        :param dst_list: The dst_list of this SecRulePutRequest.  # noqa: E501
        :type: str
        """
        if dst_list is None:
            raise ValueError("Invalid value for `dst_list`, must not be `None`")  # noqa: E501

        self._dst_list = dst_list

    @property
    def name(self):
        """Gets the name of this SecRulePutRequest.  # noqa: E501

        The three-part name of the object (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>).  # noqa: E501

        :return: The name of this SecRulePutRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecRulePutRequest.

        The three-part name of the object (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object</em></code>).  # noqa: E501

        :param name: The name of this SecRulePutRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def src_list(self):
        """Gets the src_list of this SecRulePutRequest.  # noqa: E501

        <p>The three-part name (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object_name</em></code>) of the source security list or security IP list.<p>You must use the prefix <code>seclist</code>: or <code>seciplist</code>: to identify the list type.  # noqa: E501

        :return: The src_list of this SecRulePutRequest.  # noqa: E501
        :rtype: str
        """
        return self._src_list

    @src_list.setter
    def src_list(self, src_list):
        """Sets the src_list of this SecRulePutRequest.

        <p>The three-part name (<code>/Compute-<em>identity_domain</em>/<em>user</em>/<em>object_name</em></code>) of the source security list or security IP list.<p>You must use the prefix <code>seclist</code>: or <code>seciplist</code>: to identify the list type.  # noqa: E501

        :param src_list: The src_list of this SecRulePutRequest.  # noqa: E501
        :type: str
        """
        if src_list is None:
            raise ValueError("Invalid value for `src_list`, must not be `None`")  # noqa: E501

        self._src_list = src_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecRulePutRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
