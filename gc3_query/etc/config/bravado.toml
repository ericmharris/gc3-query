[bravado.core_config]
# C:/tools/python_3.6/Lib/site-packages/bravado_core/spec.py
# On the client side, validate incoming responses
# On the server side, validate outgoing responses
# 'validate_responses': True,
# validate_responses = true
validate_responses = false

# On the client side, validate outgoing requests
# On the server side, validate incoming requests
# 'validate_requests': True,
# validate_requests = true
validate_requests = false

# Use swagger_spec_validator to validate the swagger spec
# 'validate_swagger_spec': True,
validate_swagger_spec = false
# validate_swagger_spec = false

# Use Python classes (models) instead of dicts for #/definitions/{models}
# On the client side, this applies to incoming responses.
# On the server side, this applies to incoming requests.
#
# NOTE: outgoing requests on the client side and outgoing responses on the
#       server side can use either models or dicts.
# 'use_models': True,
use_models = true
# use_models = false

# Create properties with the value None if they were not submitted during object unmarshalling
# 'include_missing_properties': True,
include_missing_properties = true
# include_missing_properties = false

# What to do when a type is missing
# If True, set the type to object and validate
# If False, do no validation
# 'default_type_to_object': False,
# default_type_to_object = false
default_type_to_object = true

# Completely dereference $refs to maximize marshaling and unmarshalling performances.
# NOTE: this depends on validate_swagger_spec
# 'internally_dereference_refs': False,
internally_dereference_refs = false


# List of user-defined swagger_formats of type
# :class:`bravado_core.formatter.SwaggerFormat`. These swagger_formats are in
# addition to the swagger_formats already supported by the Swagger 2.0
# Specification.
# 'swagger_formats': [],
# formats = [json_bool]
formats = []

[bravado.client_config]
# C:/tools/python_3.6/Lib/site-packages/bravado/config.py
# What class to use for response metadata
response_metadata_class = 'bravado.response.BravadoResponseMetadata'

# Do not use fallback results even if they're provided
disable_fallback_results = false

# DEPRECATED: Determines what is returned by HttpFuture.result().
# Please use HttpFuture.response() for accessing the http response.
also_return_response = true
